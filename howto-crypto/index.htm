<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<!--
This program is free software. It comes without any warranty, to
the extent permitted by applicable law. You can redistribute it
and/or modify it under the terms of the Do What The Fuck You Want
To Public License, Version 2, as published by Sam Hocevar and
reproduced below.

DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
Version 2, December 2004

Copyright (C) 2004 Sam Hocevar <sam@hocevar.net>

        Everyone is permitted to copy and distribute verbatim or modified
        copies of this license document, and changing it is allowed as long
        as the name is changed.

DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

        0. You just DO WHAT THE FUCK YOU WANT TO.
-->

<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<title>Crypto-HowTo</title>
		<link rel="icon" href="../static/favicon.ico" type="image/x-icon" />
		<link rel="shortcut icon" href="../static/favicon.ico" type="image/x-icon" />
		<link rel="stylesheet" type="text/css" href="../static/piracy.css" />
		<meta name="robots" content="noindex,nofollow" />
		<meta http-equiv="content-type" content="text/html;charset=utf-8" />
		<!-- Background pattern provided by subtlepatterns.com -->
	</head>
	<body>
		<div id="center-wrap">
			<div id="content-wrap">
				<div id="content-title">
					<h1>Lustige Cryptodinge mit GPG</h1>
					<h2>Eine Zusammenfassung</h2>
				</div>
				<div id="content-main">
					<div>
						<h2>Wieso verschl&uuml;sseln?</h2>
						<div class="section-padding">
							Weil mans kann? Naja, nicht nur deswegen.
							Der Umgang mit Kryptographie - insbesondere asymmetrischer
							Kryptographie - will gelernt sein, es kann immer mal passieren,
							dass es aus irgendwelchen Gr&uuml;nden n&ouml;tig wird,
							Informationen &uuml;ber einen gesicherten Kanal auszutauschen -
							seien es Passw&ouml;rter, geheime Regierungsunterlagen oder Nacktbilder.
						</div>
					</div>

					<div>
						<h2>Wie verschl&uuml;sseln?</h2>
						<p class="annotation">Dieser Abschnitt erz&auml;hlt nur ein paar Krypto-Hintergr&uuml;nde und kann prinzipiell &uuml;bersprungen werden.</span>	
						<div class="section-padding">
							Grunds&auml;tzlich unterscheidet man 2 Typen der Kryptographie:
							<ul>
								<li>
									<h3>Symmetrische Kryptographie</h3>
									Ver- und Entschl&uuml;sselung benutzen den selben Schl&uuml;ssel, dieser muss
									also sowohl dem Sender als auch dem Empf&auml;nger vorher bekannt sein und
									in irgendeiner Form ausgetauscht werden - auch &uuml;ber einen m&ouml;glichst
									sicheren Kanal.
									Vorteile sind wohl die einfachere Umsetzung und Implementierung sowie
									&quot;beweisbarere&quot; Sicherheit und bessere Performance.
								</li>
								<li>	
									<h3>Asymmetrische (aka Public-Key) Kryptographie</h3>
									Der f&uuml;r &quot;dynamischere&quot; Kommunikation interessantere Teil (und auch der
									um den sich dieses Dokument haupts&auml;chlich dreht).
									Hierbei existieren f&uuml;r einen Schl&uuml;ssel zwei Teile, n&auml;mlich ein 
									privater (geheimer) Teil, der (im besten Fall) nur dem Besitzer bekannt ist und
									ein &ouml;ffentlicher Teil, der jedem bekannt sein darf - und je nach System
									auch m&ouml;glichst weit verbreitet werden soll.
									Algorithmen f&uuml;r asymmetrische Krypto sind eher komplex und langsam,
									daher nutzen sie viele Protokolle um zu Beginn einen gemeinsamen Schl&uuml;ssel
									auszutauschen, mit welchem dann die folgende Kommunikation symmetrisch verschl&uuml;sselt
									wird.
								</li>
							</ul>
						</div>
					</div>

					<div>
						<h2>Welche Tools brauche ich?</h2>
						<div class="section-padding">
							Hier unterscheiden sich die beiden grossen Betriebssysteme etwas.
							Der Standard f&uuml;r Kommunikation mit asymmetrischer Kryptographie ist der von 
							<a href="http://en.wikipedia.org/wiki/Phil_Zimmermann">Phil Zimmerman</a>
							entwickelte <a href="http://www.ietf.org/rfc/rfc4880.txt">OpenPGP-Standard</a> 
							und seine Implementationen <a href="http://pgp.com/">PGP</a> (das &quot;Original&quot;, 
							gekauft von Symantec) und <a href="https://www.gnupg.org/">GnuPG</a> (Quelloffene, 
							kostenlose Software (FOSS)).

							<ul>
								<li>
									<h3>Linux</h3>
									Die meisten Distributionen haben GnuPG in ihren Paketarchiven;
									am bequemsten ist es daher, den Paketmanager der Wahl dazu
									zu bewegen, GnuPG zu installieren.
									F&uuml;r Leute, die sich mit der Kommandozeile wohl f&uuml;hlen,
									reicht hierbei die Versionsreihe 1.x vollkommen aus. 
									Diese ist kleiner und hat weniger Abh&auml;ngigkeiten.
									F&uuml;r nicht so text-feste Anwender empfiehlt sich die Versionsreihe
									2.x, die sich mehr in die grafische Umgebung einf&uuml;gt (besonders
									bei der Passworteingabe).
	
									<p>
										Beispiel Debian:<br/>
										<code>
											apt-get install gnupg
										</code><br/>
										bzw<br/>
										<code>
											apt-get install gnupg2
										</code>
									</p>
								</li>

								<li>
									<h3>Windows</h3>
									Man k&ouml;nnte sich nat&uuml;rlich die &quot;Originalversion&quot; von
									PGP kaufen, aber hey, wer will schon Geld ausgeben? ;)
									Es gibt einen Windows-Port von GnuPG (gesponsert/betreut vom BSI - nicht sicher
									was man davon halten soll...), welches sich aber nur unter Schmerzen davon 
									&uuml;berzeugen l&auml;sst, sein Interface auf Englisch auszugeben - wer allerdings 
									gerne deutsche Oberfl&auml;chen hat, d&uuml;rfte hier gl&uuml;cklich werden.
									Der Installer vom BSI zieht auch die Windows-Version von
									<a href="http://www.kde.org/applications/utilities/kleopatra/">Kleopatra</a> 
									(einen grafischen Schl&uuml;sselmanager aus dem KDE-Projekt)
									mit nach, der einige Techniken die in diesem Dokument sp&auml;ter beschrieben werden
									(zb. Offline-Masterkeys) nicht oder nur teilweise unterst&uuml;tzt.
									Es w&auml;re daher wohl (auch unter Sicherheitsaspekten) eine gute Idee,
									zumindest die Key-Erzeugung mit einem (Live-)Linux-System vorzunehmen.
									<br/><br/>
									Es ist wohl auch m&ouml;glich GnuPG unter Cygwin zu bauen, wenn man
									sich diesen Spass g&ouml;nnen will.
								</li>
							</ul>
						</div>
					</div>
					
					<div>
						<h2>Was ist ein GPG-Key(pair)?</h2>
						<div class="section-padding">
							Eine der Grundeinheiten des GPG-&Ouml;kosystems ist der GPG-Key (bzw das
							GPG-Keypair, bestehend aus einem privaten und einem &ouml;ffentlichen Key), 
							der lose gesagt die Repr&auml;sentation eines Benutzers (bzw. eines Individuums) 
							darstellt.

							<p>
								Der Begriff des &quot;Key&quot; ist im PGP-Jargon doppeldeutig: Er kann sowohl
								eine komplette Identit&auml;t meinen, als auch einen spezifischen kryptographischen
								Schl&uuml;ssel. Ein &quot;Identit&auml;tsschl&uuml;ssel&quot; kann mehrere
								&quot;Kryptographieschl&uuml;ssel&quot;, auch mit unterschiedlichen Anwendungsbereichen
								(Signieren, Verschl&uuml;sseln) und Algorithmen (RSA, DSA, ElGamal) besitzen.
								Die Bedeutungen sind sich sehr &auml;hnlich und haben unter anderem gemeinsam, 
								dass sie durch einen sogenannten Fingerprint eindeutig identifiziert werden k&ouml;nnen.
							</p>

							Ein GPG-Key enth&auml;lt mehrere Untereinheiten:

							<ul>
								<li>
									<h3>User-IDs (UIDs)</h3>
									Ein Key kann viele verschiedene Identit&auml;ten eines einzelnen Benutzers
									enthalten. Eine UID besteht aus einem Namen, einer Emailadresse und einem Kommentar.
									Nur das Namensfeld ist zwingend erforderlich, die anderen beiden sind optional.

									<p>
										Im Normalfall hat ein Key eine UID f&uuml;r jede Emailadresse, auf der der Benutzer
										verschl&uuml;sselte/signierte Kommunikation senden oder empfangen m&ouml;chte.
										UIDs werden besonders im Zusammenhang mit dem Web of Trust zu wichtigen Merkmalen
										eines Keys.
									</p>
								
									<p>
										UIDs haben jedoch keinen kryptographischen Einfluss auf den Schl&uuml;ssel,
										sondern gelten nur als Identifikationsm&ouml;glichkeit (bedeutet: Es wird nicht
										an eine bestimmte UID verschl&uuml;sselt, sondern an einen bestimmten Krypto-Key).
									</p>

									<p>
										Der Besitzer eines Keys kann diesem w&auml;hrend seiner Lebenszeit unbegrenzt
										viele UIDs hinzuf&uuml;gen und diese auch wieder &quot;zur&uuml;ckrufen&quot; (revoken).
										Es ist zwar m&ouml;glich eine UID von einem Key zu l&ouml;schen, jedoch
										werden Keys normalerweise additiv importiert - sprich, hat ein anderer User
										den &ouml;ffentlichen Schl&uuml;ssel in einer Version, in der die gel&ouml;schte UID
										noch existiert, so wird diese beim Import der neuen Version nicht gel&ouml;scht,
										sondern existiert weiter.
									</p>
								</li>

								<li>
									<h3>Subkeys</h3>
									Ein Schl&uuml;sselpaar kann beliebig viele &quot;Unterschl&uuml;ssel&quot; besitzen - 
									mit jeweils eigenen Schl&uuml;sselalgorithmen, Ablaufdaten, Schl&uuml;ssell&auml;ngen
									und Fingerprints.
									Trotzdem sind diese Subkeys mathematisch Teil des &uuml;bergeordneten Schl&uuml;ssels.
									Ihre privaten Teile k&ouml;nnen jedoch unabh&auml;ngig von denen des Hauptschl&uuml;ssels 
									exportiert und verwendet werden, wodurch sich einige Verbesserungen in der Benutzbarkeit 
									ergeben.
									<p>
										Genau wie UIDs kann der Besitzer eines Schl&uuml;ssels diesem w&auml;hrend seiner Lebenszeit
										beliebig viele Subkeys hinzuf&uuml;gen und diese auch wieder zur&uuml;ckrufen.
									</p>

									Anders als UIDs sind Subkeys jedoch kryptographisch relevant:
									Sie besitzen einen eigenen eindeutigen Fingerprint und an sie kann speziell verschl&uuml;sselt
									(Encryption-Subkeys) oder mit ihnen signiert (Signing-Subkeys) werden.
								</li>
								<li>
									<h3>Photo IDs</h3>
									Es ist auch m&ouml;glich, kleinere Bilddateien an Schl&uuml;ssel anzuh&auml;ngen.
									Diese koennen bspw. als weiteres Verifikationsmedium f&uuml;r die Identit&auml;t eines 
									Schl&uuml;sselinhabers genutzt werden.
								</li>
							</ul>
						</div>
					</div>

					<div>
						<h2>Wie erzeuge ich mein Keypair?</h2>
						<p class="annotation">Mangels Erfahrung mit Alternativen werden wir uns hier auf den Umgang mit GnuPG unter Linux-Systemen beschr&auml;nken.</p>
						<div class="section-padding">
							Diese Anleitung versucht, ein m&ouml;glichst sicheres Schema
							f&uuml;r die Benutzung einer Identit&auml;t auch auf mehreren
							Ger&auml;ten zu beschreiben. Ein einfacher Schl&uuml;ssel ohne weitere
							Sicherheitsvorkehrungen kann mit dem Befehl
							<code>
								gpg --gen-key
							</code>
							interaktiv erzeugt werden.
							
							<p>
								F&uuml;r die Erstellung eines guten&trade; Schl&uuml;sselpaares empfiehlt es
								sich, eine &quot;sichere&quot; Maschine zu benutzen - also ein System,
								bei dem man davon ausgehen kann, dass es bisher &quot;&uuml;berwachungsfrei&quot; 
								ist und welches m&ouml;glichst wenig Angriffsfl&auml;che bietet.
							</p>

							<p>
								Hierzu bieten sich einige M&ouml;glichkeiten:
								<ul>
									<li>
										<h3>Livesysteme</h3>
										Es gibt einige Linux-Distributionen (oder auch BSD, falls jemand das lieber ist),
										die Live-Medien anbieten (bspw. <a href="https://tails.boum.org/">Tails</a>, 
										<a href="http://grml.org/">grml</a>) - also bootbare USB-Sticks oder CDs
										die schon alles n&ouml;tige f&uuml;r GPG an Bord haben (und im Idealfall
										auch nicht mehr als das).
									</li>
									<li>
										<h3>Ein Offline-/Airgapped-System</h3>
										Bei dieser Methode verwendet man einen Computer (am sinnvollsten einen Laptop)
										nur f&uuml;r diesen Zweck. Er wird einmal mit einem minimalen System (von einem
										vertrauensw&uuml;rdigen Medium) installiert und darf niemals eine Internetverbindung
										haben - daher der Name &quot;Airgap&quot;.
									</li>
								</ul>
								Generell empfiehlt es sich, auf dem System der Wahl m&ouml;glichst
								wenige Prozesse aktiv zu haben (bspw. nur Textsystem), w&auml;hrend der Erzeugung keine
								physische Netzwerkverbindung zu haben (Kabel ziehen!) und die
								sensitiven Daten bspw. auf einem verschl&uuml;sselten USB-Stick (mit einer Partition, die nie
								an &quot;unsicheren&quot; Systemen gemountet wird und einer, die dazu dient, Daten auf
								&quot;potentiell sichere&quot; Systeme zu &uuml;bertragen) zu speichern.
							</p>
							<p>
								Wir werden in dieser Anleitung ein Keypair mit mehreren
								Subkeys (siehe oben) erzeugen - in unserem Fall mit einem
								Encryption-Subkey (wer sich der Implikationen bewusst ist
								kann auch gerne mehrere Encryption-Subkeys erzeugen) sowie
								einem Signing-Subkey pro Ger&auml;t auf dem der Schl&uuml;ssel
								verwendet werden soll.
								<br/><br/>

								Die einzelnen Ger&auml;te sollen dabei auch nur die geheimen
								Teile ihrer jeweiligen Subkeys besitzen, sodass selbst
								wenn eines der Ger&auml;te kompromittiert (verloren, &uuml;berwacht,
								gel&ouml;scht) wird, der Besitzer mit dem Master-Keypair problemlos 
								nur diesen einzelnen Subkey revoken kann und dabei nicht automatisch
								das gesamte Keypair verliert oder die Sicherheit der anderen
								Ger&auml;te aufs Spiel setzt.
							</p>

							<p>
								Jetzt noch einige Worte dazu, wie GPG Schl&uuml;ssel auf
								der Platte verwaltet:<br/>
								Als default benutzt GPG Verzeichnis <code>~/.gnupg/</code> 
								im Home-Ordner des jeweiligen Benutzers, um alle Daten zu
								speichern. Schl&uuml;ssel werden dabei in sogenannten
								&quot;Keyrings&quot; organisiert, die man sich als Container
								f&uuml;r mehrere Schl&uuml;ssel vorstellen kann.
							       	Folgende Dateien finden sich im Normalfall
								mindestens in ~/.gnupg/:
								<ul>
									<li>
										<strong>secring.gpg</strong> - 
										Enth&auml;lt die privaten Teile von Schl&uuml;sseln, 
										wo sie bekannt sind.
									</li>
									<li>
										<strong>pubring.gpg</strong> - 
										Enth&auml;lt alle &ouml;ffentlichen Schl&uuml;ssel.
									</li>
									<li>
										<strong>trustdb.gpg</strong> - 
										Enth&auml;lt Informationen dar&uuml;ber, zu welchem
										Grad bestimmten Schl&uuml;sseln vertraut wird.
									</li>
								</ul>

								<code>pubring.gpg</code> und <code>secring.gpg</code> werden
								von GnuPG standardm&auml;ssig als Keyrings verwendet.
								Nat&uuml;rlich ist es auf einem Livesystem eher ungewollt,
								diese Dateien im Homeverzeichnis zu haben, daher macht es Sinn
								sich bspw. einen verschl&uuml;sselten USB-Stick zu bauen und
								das Master-Keypair dort zu speichern.
							</p>
							<p>
								Damit kommen wir auch schon zum Hauptteil. Die nachfolgenden
								Schritte sollten nacheinander auf dem vorher erw&auml;hnten
								sicheren System (mit gemountetem sicheren Storage-Medium) ausgef&uuml;hrt 
								werden.
								<ol>
									<li>
										<h3>GNUPGHOME setzen</h3>
										Damit unsere Schl&uuml;ssel nicht auf der Platte oder im
										tempor&auml;ren Homeverzeichnis unseres Livesystems landen,
										setzen wir mit <br/>
										<code>user@box:~$ export GNUPGHOME=/media/meinSicheresMedium/gpg_home</code>	
										<br/>
										eine Umgebungsvariable, die GPG anweist, seine Dateien auf unserem sicheren 
										Medium zu speichern. Der Ordner sollte die Zugriffsmaske 700
										(Besitzer: lesen, schreiben, ausf&uuml;hren; Gruppe: keine; Alle: keine)
										besitzen, ansonsten kann es sein dass GPG bei manchen Befehlen wegen
										&quot;unsicherer Zugriffsrechte&quot; den Dienst verweigert.
									</li>
									<li>
										<h3>Master-Keypair generieren</h3>
										Mit dem Befehl<br/>
										<code>user@box:~$ gpg --gen-key</code>	
										<br/>
										starten wir den Assistenten zur Schl&uuml;sselerzeugung.
										GPG f&uuml;hrt uns nun durch einige Abfragen, die
										den neuen Key betreffen.
										Wir m&ouml;chten einen Schl&uuml;ssel, der sowohl
										signieren als auch verschl&uuml;sseln kann.
										In unserem Fall kann man diesen sogar unbegrenzt
										gelten lassen, da wir uns gleich noch einige
										Rettungsseile basteln werden und der Master-Key relativ
										sicher sein wird.
										Als erste UID reicht im Zweifelsfall auch der Name
										ohne Email-Adresse oder Kommentar (wir werden sp&auml;ter
										noch Gelegenheit haben, andere hinzuzuf&uuml;gen).
										Als Passphrase sollten wir hier eine m&ouml;glichst
										komplexe Zeichenfolge aussuchen. Die Ger&auml;tespezifischen
										Schl&uuml;ssel werden eigene Passphrasen bekommen.
									</li>
									<li>
										<h3>Pr&auml;ferierte Algorithmen &amp; weitere UIDs</h3>
										Jetzt werden wir den gerade erstellten Schl&uuml;ssel bearbeiten,
										um einige Einstellungen vorzunehmen und weitere UIDs
										hinzuzuf&uuml;gen.<br/>
										<code>user@box:~$ gpg --edit-key &lt;identifier&gt;</code><br/>
										&lt;identifier&gt; kann hierbei sein:
										<ul>
											<li>(Teil-)Fingerprint</li>
											<li>Teile der UID</li>
										</ul>
										GPG pr&auml;sentiert uns nun sein interaktives Interface.
										Wir f&uuml;hren darin folgenden Befehl aus, um die bevorzugten
										Algorithmen etwas zu st&auml;rken:<br/>
										<code>gpg&gt; setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed</code>
										<br/>
										GPG fragt uns nach der Passphrase, welche wir uns nat&uuml;rlich
										mittlerweile auswendig gemerkt haben ;).

										Danach k&ouml;nnen auf der GPG-Kommandozeile mit<br/>
										<code>gpg&gt; adduid</code><br/>
										weitere UIDs interaktiv hinzugef&uuml;gt werden.
										Abschliessend speichern wir unsere &Auml;nderungen mit einem<br/>
										<code>gpg&gt; save</code>

									</li>
									<li>
										<h3>Subkeys hinzuf&uuml;gen</h3>
										Wir beginnen wieder mit<br/>
										<code>user@box:~$ gpg --edit-key &lt;identifier&gt;</code><br/>
										unseren Key zu bearbeiten. Diesmal starten wir mit<br/>
										<code>gpg&gt; addkey</code><br/>
										den Assistent f&uuml;r das hinzuf&uuml;gen eines Subkeys. Wir entsperren
										hierf&uuml;r unseren Schl&uuml;ssel wie gehabt mit der Passphrase und
										w&auml;hlen dann den Typ, den unser neuer Subkey haben soll - in
										unserem Fall dann ein &quot;Sign only&quot;-Key. Es ist auch m&ouml;glich,
										einen Encryption-Subkey pro Ger&auml;t zu erstellen - nur muss dies demjenigen,
										der an den Besitzer verschl&uuml;sselt, kommuniziert werden. Dateien, die an
										einen bestimmten Subkey verschl&uuml;sselt sind, k&ouml;nnen auch nur mit
										dessen privaten Teil entschl&uuml;sselt werden.<br/>
										Den Subkeys geben wir in unserem Fall am besten eine Lebenszeit von
										2 Jahren - nach denen dem Master-Key dann problemlos neue hinzugef&uuml;gt und
										diese dann die alten auf den Ger&auml;ten ersetzen.<br/>
										Haben wir alle unsere Subkeys erzeugt, speichern wir unsere &Auml;nderungen
										mit einem<br/>
										<code>gpg&gt; save</code>
									</li>
									<li>
										<h3>Revocation Certificate generieren</h3>
										Um das komplette Master-Keypair im Notfall (bspw. geheime Teile komplett verloren) 
										zur&uuml;ckrufen zu k&ouml;nnen, erzeugen wir jetzt ein sogenanntes 
										&quot;Revocation Certificate&quot; mit<br/>
										<code>gpg --gen-revoke &lt;identifier&gt; &gt; /media/meinSicheresMedium/master-pair.revcert</code><br/>
										Die entstandene Datei sollten wir wenn irgendwie m&ouml;glich auch auf einem
										sicheren Drucker drucken (ist nicht &uuml;berm&auml;ssig gross) und danach irgendwo
										sicher aufbewahren. Im &auml;ussersten Notfall k&ouml;nnen wir das Revocation
										Certificate dann abtippen, importieren und an die Keyserver senden, um unser
										Master-Keypair als ung&uuml;ltig zu markieren.
									</li>
									<li>
										<h3>Komplettes Master-Keypair exportieren</h3>
										Als n&auml;chstes werden wir das komplette Master-Keypair, inklusive
										der Subkey-Secrets exportieren.<br/>
										<code>
											gpg --export --armor --no-emit-version &lt;identifier&gt; &gt; /media/unsichererTeil/mein-key.asc<br/>
											gpg --export-secret-keys --armor &lt;identifier&gt; &gt; /media/meinSicheresMedium/master.secret-key
										</code>
										<br/>
										Die resultierende .secret-key Datei ist der wichtigste Teil der ganzen &Uuml;bung.
										Bekommt ein Angreifer sie in die Hand, haben wir verloren (bis auf die Passphrase,
										allerdings ist das je nach Angreifer eine minimale Barriere) und die einzige
										Chance ist das Revocation Certificate.<br/>
										Die .asc Datei ist unser &ouml;ffentlicher Schl&uuml;ssel, weswegen wir ihn auch
										auf den &quot;unsicheren&quot; Teil unseres Speichermediums exportiert haben.
										Eine Kopie im sicheren Teil vorzuhalten schadet jedoch nicht.
									</li>
									<li>
										<h3>Subkeys einzeln exportieren und Passphrasen &auml;ndern</h3>
									</li>
									<li>
										<h3>Komplettes Master-Keypair wieder in secring.gpg importieren</h3>
									</li>
								</ol>
								
								Damit haben wir uns ein ziemlich gutes&trade; Keypair gebaut!
								Wenn wir den &ouml;ffentlichen Teil des Master-Keys jetzt auf einer
								&quot;unsicheren&quot; Maschine mit <br/>
								<code>gpg --import /media/unsichererTeil/mein-key.asc</code> <br/>
								wieder importieren und mit<br/>
								<code>gpg --send-keys &lt;fingerprint&gt;</code><br/>
								an einen Keyserver schicken, k&ouml;nnen uns auch andere Menschen
								finden. Alternativ (oder auch zus&auml;tzlich) kann man nat&uuml;rlich 
								den &ouml;ffentlichen Teil auch auf seiner Homepage zum Download anbieten.
							</p>
						</div>
					</div>

					<div>
						<h2>Wie verschl&uuml;ssele/entschl&uuml;ssele/signiere ich?</h2>
						<div class="section-padding">
							//gpg-agent
							//list-keys, etc
						</div>
					</div>

					<div>
						<h2>Wie funktioniert das Web of Trust?</h2>
						<div class="section-padding">
							//signingpolicy
							//list sigs etc
						</div>
					</div>


					<div>
						<h2>Was tun, wenn der Schl&uuml;ssel kompromittiert ist?</h2>
						<div class="section-padding">
							//revcert importieren und senden, etc
						</div>
					</div>
					
					<div>
						<h2>Weiterf&uuml;hrendes &amp; Links</h2>
						<div class="section-padding">
							Sollte euch eines der genannten Projekte sehr gut gefallen,
							w&uuml;rden sie sich alle &uuml;ber Spenden (ob nun Geld oder
							Manpower beim Bugs reporten, Bugs fixen oder User supporten) 
							oder Lob freuen! Denkt dran, nur weil Software kostenlos ist,
							ist sie noch lange nicht wertlos!
							<ul>
								<li>
									<a href="https://www.gnupg.org/documentation/bts.html">GnuPG Bug Tracking System</a>
								</li>
								<li>
									<a href="https://www.gnupg.org/donate/index.html">GnuPG Spenden-Informationen</a>
								</li>
								<li>
									<a href="http://www.kde.org/community/donations/index.php#money">Kleopatra/KDE Spenden-Informationen</a>
								</li>
								<li>
									<a href="https://tails.boum.org/contribute/index.en.html">Tails contribution information</a>
								</li>
								<li>
									<a href="http://grml.github.io/">grml contribution information</a>
								</li>
							</ul>
							Die Informationen in diesem Dokument wurden zum grossen Teil aus
							dem Kopf geschrieben - unterst&uuml;tzt durch die Dokumentationen
							der verschiedenen Projekte und einige Blogeintr&auml;ge und Mailinglisten-Posts,
							f&uuml;r die wir den Autoren sehr dankbar sind:
							<ul>
								<li>
									<a href="https://www.gnupg.org/documentation/index.html">GnuPG Dokumentation</a>
								</li>
								<li>
									<a href="http://lists.gnupg.org/pipermail/gnupg-users/2002-August/014780.html">[gnupg-users] using various subkeys</a>
								</li>
								<li>
									<a href="https://alexcabal.com/creating-the-perfect-gpg-keypair/">Alex Cabal: Creating the perfect GPG Keypair</a>
								</li>
								<li>
									<a href="https://wiki.debian.org/Subkeys">Debian Wiki: GPG Subkeys</a>
								</li>
							</ul>
						</div>
					</div>
				</div>
				
				<div id="content-foot">
					<a href="../">#kitinfo Sharingparty Portal</a> - Crypto HowTo
				</div>
			</div>
			<div style="text-align:right;padding:0.3em 1em 0 1em;">
				<a href="http://www.kopimi.com/kopimi/"><img src="../static/kopimi.png" alt="kopimi" /></a>
				<a href="http://wtfpl.net/"><img src="../static/wtfpl.png" alt="wtfpl" /></a>
			</div>
		</div>
	</body>
</html>
